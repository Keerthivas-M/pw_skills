{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Keerthivas-M/pw_skills/blob/main/resources/Best_Practice_Exception_Handling\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "31348c43-94ec-4f33-ba41-0126c9a39d1e",
      "metadata": {
        "id": "31348c43-94ec-4f33-ba41-0126c9a39d1e",
        "outputId": "8268bcb2-2515-4f39-d96a-18cc41115bdd"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "division by zero\n"
          ]
        }
      ],
      "source": [
        "#use always a specific exception\n",
        "try :\n",
        "    10/0\n",
        "except Exception as e :\n",
        "    print(e)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "716f6e45-aef9-461e-988b-c93e8aa5d0e8",
      "metadata": {
        "id": "716f6e45-aef9-461e-988b-c93e8aa5d0e8",
        "outputId": "039e3a56-1aa2-49dc-8a25-711b6b30f666"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "division by zero\n"
          ]
        }
      ],
      "source": [
        "try :\n",
        "    10/0\n",
        "except ZeroDivisionError as e :\n",
        "    print(e)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "23447a5a-658b-4fd2-8a00-0af0f72c3c53",
      "metadata": {
        "id": "23447a5a-658b-4fd2-8a00-0af0f72c3c53",
        "outputId": "df24a555-881f-4659-fab7-2dcb25e18011"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "this is my zero dedision error i am handling  division by zero\n"
          ]
        }
      ],
      "source": [
        "#print always a valid msg\n",
        "try :\n",
        "    10/0\n",
        "except ZeroDivisionError as e :\n",
        "    print(\"this is my zero dedision error i am handling \" , e)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "852ef67e-487a-4ea5-ab7f-2a1486b1682a",
      "metadata": {
        "id": "852ef67e-487a-4ea5-ab7f-2a1486b1682a"
      },
      "outputs": [],
      "source": [
        "#always try to log \n",
        "import logging\n",
        "logging.basicConfig(filename = \"error.log\" , level = logging.ERROR)\n",
        "try :\n",
        "    10/0\n",
        "except ZeroDivisionError as e :\n",
        "    logging.error(\"this is my zero dedision error i am handling {} \".format( e))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "01dca34d-63f2-4a04-bbd0-433e504e1e6a",
      "metadata": {
        "id": "01dca34d-63f2-4a04-bbd0-433e504e1e6a"
      },
      "outputs": [],
      "source": [
        "#always avoid to write a multiple exception handling \n",
        "try :\n",
        "    10/0\n",
        "except FileNotFoundError as e : \n",
        "    logging.error(\"this is my file not found  {} \".format( e))\n",
        "except AttributeError as e : \n",
        "    logging.error(\"this is my attribute erro  {} \".format( e))\n",
        "except ZeroDivisionError as e :\n",
        "    logging.error(\"this is my zero dedision error i am handling {} \".format( e))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "3c3fef08-5872-461d-91c9-4fbae19a8e6e",
      "metadata": {
        "id": "3c3fef08-5872-461d-91c9-4fbae19a8e6e"
      },
      "outputs": [],
      "source": [
        "#prepare a proper documnetation"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "222f08b8-c1e9-46d7-abd2-2d26ea36805e",
      "metadata": {
        "id": "222f08b8-c1e9-46d7-abd2-2d26ea36805e"
      },
      "outputs": [],
      "source": [
        "#cleanup all the resources \n",
        "\n",
        "try :\n",
        "    with open(\"test.txt\" , \"w\" ) as f :\n",
        "        f.write(\"thsi is my msg to file \" )\n",
        "except FileNotFoundError as e : \n",
        "     logging.error(\"this is my file not found  {} \".format( e))\n",
        "finally : \n",
        "    f.close()"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.10.8"
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}